#!/usr/bin/env python
# -*- coding:utf-8 -*-

#####################################################
# ghtoc   : a markdown toc generator
# Author  : Kai Yuan <kent.yuan@gmail.com>
# Fork    : sinlov <sinlovgmppt@gmail.com>
# Usage   : toc.py <markdown file>
# Date    : 2015-12-31
# License : see https://github.com/sk1418/ghtoc
# Copyright (C) 2014 Kai Yuan
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#####################################################

import re
import sys
import shutil
import datetime

top_level = 77
lnk_temp = '%s- [%s](#%s)'
TOC_MARK = '--------------'
REG_TOC_MARK = r'--------------'
REF = '**TOC generated by [sinlov](https://github.com/sinlov/ghtoc)**'


def auto_move_toc(full):
    result = []
    not_toc = True
    for line in full:
        if re.match(REG_TOC_MARK, line):
            not_toc = not not_toc
            continue
        elif not_toc:
            result.append(line)
    return result


def generate_toc(f_name):
    global top_level
    lines = []
    with open(f_name, 'r') as file:
        lines = file.readlines()
        if len(lines) == 0:
            print 'You file is empty, please check it!'
            return
    # backup old file
    ts = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
    back_f = '.'.join((f_name, ts, 'bak'))
    shutil.copy(f_name, back_f)
    print "Backup was created: [%s]" % back_f
    newlines = auto_move_toc(lines)
    headers = [e.strip() for e in newlines if re.match(r'#+', e)]
    # encode TOC
    for i, h in enumerate(headers):
        ln = len(re.search(r'^#+', h).group(0))
        top_level = ln if ln < top_level else top_level
        headers[i] = re.sub(r'^#+\s*', str(ln) + ' ', h)
    headers = [tr_header(h) for h in headers]
    # write new file
    with open(f_name, 'w') as f:
        f.write(TOC_MARK + '\n\n')
        f.write('\n'.join(headers) + '\n')
        f.write('\n')
        f.write(REF + '\n')
        f.write('\n')
        f.write(TOC_MARK + '\n')
        f.write(''.join(newlines))


def tr_header(header):
    global lnk_temp
    lvl, txt = re.findall(r'^(\d+) (.*)', header)[0]
    return lnk_temp % ((int(lvl) - top_level) * '    ', txt, re.sub(' ', '-', re.sub('[^-a-z0-9 ]', '', txt.lower())))


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print """
            Usage:
            ./toc.py <markdown file>
        """
    else:
        infile = sys.argv[1]
        generate_toc(infile)
